const fetch = require('node-fetch');
const yts = require('yt-search');
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

async function videoCommand(sock, chatId, message) {
    try {
        const text = message.message?.conversation || message.message?.extendedTextMessage?.text;
        const searchQuery = text.split(' ').slice(1).join(' ').trim();

        if (!searchQuery) {
            await sock.sendMessage(chatId, { text: 'üì• ‡∂î‡∂∫‡∑è download ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ï‡∂± video ‡∂ë‡∂ö‡∑ö ‡∂±‡∂∏ ‡∑Ñ‡∑ù link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ë‡∑Ä‡∂±‡∑ä‡∂±.' }, { quoted: message });
            return;
        }

        let videoUrl = '';
        if (searchQuery.startsWith('http://') || searchQuery.startsWith('https://')) {
            videoUrl = searchQuery;
        } else {
            const { videos } = await yts(searchQuery);
            if (!videos || videos.length === 0) {
                await sock.sendMessage(chatId, { text: 'üòì Video ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è.' }, { quoted: message });
                return;
            }
            videoUrl = videos[0].url;
        }

        const urls = videoUrl.match(/(?:https?:\/\/)?(?:youtu\.be\/|(?:www\.|m\.)?youtube\.com\/(?:watch\?v=|v\/|embed\/|shorts\/|playlist\?list=)?)([a-zA-Z0-9_-]{11})/gi);
        if (!urls) {
            await sock.sendMessage(chatId, { text: '‚õî ‡∂∏‡∑ö‡∂ö valid YouTube link ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ô‡∂∏‡∑ô‡∂∫‡∑í!' }, { quoted: message });
            return;
        }

        // Try SaveTube API first with timeout
        let data;
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 10000);
        try {
            const res = await fetch(`https://api.savetube.me/ytdl?url=${encodeURIComponent(videoUrl)}`, {
                signal: controller.signal
            });
            clearTimeout(timeout);
            if (!res.ok) throw new Error('SaveTube API response error');
            data = await res.json();
        } catch (err) {
            clearTimeout(timeout);
            console.log('‚ö†Ô∏è SaveTube failed:', err.message);

            // Fallback API (Violetics)
            const fallback = await fetch(`https://violetics.pw/api/media/youtube-video?apikey=trial&url=${encodeURIComponent(videoUrl)}`);
            if (!fallback.ok) {
                await sock.sendMessage(chatId, { text: 'üõë Video download API ‡∂Ø‡∑ô‡∂ö‡∂∏ fail ‡∑Ä‡∑î‡∂´‡∑è.' }, { quoted: message });
                return;
            }
            const res = await fallback.json();
            if (!res?.result?.url) {
                await sock.sendMessage(chatId, { text: 'üòî Fallback API ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä‡∑Ä‡∂≠‡∑ä link ‡∂ë‡∂ö ‡∑Ñ‡∑ú‡∂∫‡∑è‡∂ú‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í ‡∑Ä‡∑î‡∂´‡∑è.' }, { quoted: message });
                return;
            }
            data = {
                result: {
                    download: {
                        url: res.result.url,
                        filename: res.result.title || 'video'
                    }
                }
            };
        }

        const videoDownloadUrl = data.result.download.url;
        const title = data.result.download.filename || 'video.mp4';
        const filename = title.replace(/[<>:"/\\|?*]+/g, '').slice(0, 40) + '.mp4';

        const tempDir = path.join(__dirname, '../temp');
        if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);
        const timestamp = Date.now();
        const tempFile = path.join(tempDir, `${timestamp}.mp4`);
        const convertedFile = path.join(tempDir, `converted_${timestamp}.mp4`);

        const videoRes = await fetch(videoDownloadUrl);
        if (!videoRes.ok) {
            await sock.sendMessage(chatId, { text: '‚¨áÔ∏è Video ‡∂ë‡∂ö download ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∂ª‡∑í ‡∑Ä‡∑î‡∂´‡∑è.' }, { quoted: message });
            return;
        }

        const buffer = await videoRes.buffer();
        if (!buffer || buffer.length < 1024) {
            await sock.sendMessage(chatId, { text: '‚ö†Ô∏è Download ‡∑Ä‡∑î‡∂´‡∑è‡∂ß video ‡∂ë‡∂ö empty ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ä‡∂ú‡∑ö!' }, { quoted: message });
            return;
        }

        fs.writeFileSync(tempFile, buffer);

        try {
            await execPromise(`ffmpeg -i "${tempFile}" -c:v libx264 -c:a aac -preset fast -crf 23 -movflags +faststart "${convertedFile}"`);
            const stats = fs.statSync(convertedFile);
            if (stats.size < 1024) throw new Error('Conversion failed - file too small');
            if (stats.size > 62 * 1024 * 1024) {
                await sock.sendMessage(chatId, { text: 'üß± Video ‡∂ë‡∂ö ‡∑Ä‡∑í‡∑Å‡∑è‡∂Ω‡∂∫‡∑í. WhatsApp ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂ë‡∑Ä‡∂±‡∑ä‡∂± ‡∂∂‡∑ê‡∑Ñ‡∑ê.' }, { quoted: message });
                return;
            }

            await sock.sendMessage(chatId, {
                video: { url: convertedFile },
                mimetype: 'video/mp4',
                fileName: filename,
                caption: `üé¨ *${title}*\n\n_üì• Knight Bot MD ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä download ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì_`
            }, { quoted: message });

        } catch (err) {
            console.log('üõ†Ô∏è Conversion failed:', err.message);
            await sock.sendMessage(chatId, {
                video: { url: tempFile },
                mimetype: 'video/mp4',
                fileName: filename,
                caption: `üé¨ *${title}*\n\n_üì• Knight Bot MD ‡∑Ä‡∑í‡∑É‡∑í‡∂±‡∑ä download ‡∂ö‡∂ª‡∂± ‡∂Ω‡∂Ø‡∑ì_`
            }, { quoted: message });
        }

        setTimeout(() => {
            try {
                if (fs.existsSync(tempFile)) fs.unlinkSync(tempFile);
                if (fs.existsSync(convertedFile)) fs.unlinkSync(convertedFile);
            } catch {}
        }, 5000);

    } catch (error) {
        console.log('‚ùå Video Command Error:', error.message);
        await sock.sendMessage(chatId, { text: `üí• Download ‡∂ë‡∂ö fail ‡∑Ä‡∑î‡∂´‡∑è: ${error.message}` }, { quoted: message });
    }
}

module.exports = videoCommand;
